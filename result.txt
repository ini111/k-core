Algorithm 1: peel:
core(v) for each v （ V:
core(0) = 3
core(1) = 3
core(2) = 3
core(3) = 3
core(4) = 2
core(5) = 3
core(6) = 3
core(7) = 3
core(8) = 3

Algorithm 2: k-core:
the subgraph of G induced by vertices with d(.) >= 3
neighbor vertex of 0: 1 2 3 
neighbor vertex of 1: 0 2 3 
neighbor vertex of 2: 0 1 3 
neighbor vertex of 3: 0 1 2 
neighbor vertex of 5: 6 7 8 
neighbor vertex of 6: 5 7 8 
neighbor vertex of 7: 5 6 8 
neighbor vertex of 8: 5 6 7 

Algorithm 3: CoreHierarchy:
A core hierarchy tree CoreHT of G:

Algorithm 4: CoreSpanning:
A core spanning tree CoreSPT of G
1 0 3
3 0 3
2 0 3
7 6 3
8 6 3
5 6 3
4 2 2
4 5 2

Algorithm 5: CoreD-Local:
core(v) of each vertex v （ V
core(0) = 3
core(1) = 3
core(2) = 3
core(3) = 3
core(4) = 2
core(5) = 3
core(6) = 3
core(7) = 3
core(8) = 3

Algorithm 6: CoreD-Local-opt:
core(v) of each vertex v （ V
core(0) = 3
core(1) = 3
core(2) = 3
core(3) = 3
core(4) = 2
core(5) = 3
core(6) = 3
core(7) = 3
core(8) = 3

Algorithm 7: CoreD-IO:
core(v) of each vertex v （ V
core(0) = 3
core(1) = 3
core(2) = 3
core(3) = 3
core(4) = 2
core(5) = 3
core(6) = 3
core(7) = 3
core(8) = 3
